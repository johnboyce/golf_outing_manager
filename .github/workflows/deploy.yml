name: Deploy Lambda and Infrastructure

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      S3_LAMBDA_BUCKET: golf-outing-lambda-deployments
      S3_GOLF_BUCKET: golf-outing-manager
      LAMBDA_NAME: GolfOutingHandler
      LAMBDA_RUNTIME: nodejs18.x
      LAMBDA_HANDLER: index.handler
      REGION: us-east-1
      ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/golf_outing_lambda_role
      DYNAMODB_TABLE: GolfOutingTable

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform

      - name: Sync to S3
        run: |
          aws s3 sync ./src s3://${{ env.S3_GOLF_BUCKET }} --delete
          echo "Static files synced to S3 bucket."

      - name: Package Lambda
        run: |
          cd lambda
          zip -r ../lambda.zip .
          echo "Lambda package created successfully."
          ls -la ../lambda.zip

      - name: Upload Lambda to S3
        run: |
          aws s3 cp ./lambda.zip s3://${{ env.S3_LAMBDA_BUCKET }}/lambda.zip

      - name: Deploy Lambda Function
        run: |
          cd terraform
          CLOUDFRONT_URL=$(terraform output -raw s3_bucket_website_url || echo "Failed to fetch Cloudfront Domain")
          echo "Cloudfront Domain: $CLOUDFRONT_URL"
          echo "Attempting to validate..."
          if [[ -z "$CLOUDFRONT_URL" ]]; then
            echo "Cloudfront Domain is empty. Skipping validation."
            exit 0
          fi
          curl -I https://$CLOUDFRONT_URL || echo "Validation failed but continuing deployment"

      - name: Validate API Gateway Deployment
        run: |
          echo "Validating deployment..."
          terraform -chdir=terraform output api_gateway_url
