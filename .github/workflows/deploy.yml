name: Deploy Infrastructure

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Validate AWS Credentials
      - name: Validate AWS Credentials
        run: aws sts get-caller-identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"

      # Step 3: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

        # Step 4: Initialize Terraform
        # This ensures the S3 bucket for Lambda is created first
      - name: Apply Initial Infrastructure (Lambda Bucket)
        run: |
          terraform init
          terraform apply -auto-approve -target=aws_s3_bucket.lambda_deployment_bucket
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"

      # Step 5: Package Lambda Function
      - name: Package Lambda Function
        run: |
          cd lambda
           echo "Before Zip creation"
          ls -la
          zip -r ../lambda.zip .
          echo "After Zip creation"
          cd ..

      # Step 6: Upload Lambda ZIP to S3
      - name: Upload Lambda ZIP to S3
        run: |
          aws s3 cp lambda.zip s3://golf-outing-lambda-deployments/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"

        # Step 7: Apply Full Infrastructure
        # This deploys the full infrastructure, including the Lambda function
      - name: Apply Full Infrastructure
        run: terraform apply -auto-approve
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"

      # Step 8: Retrieve CloudFront Distribution ID
      - name: Get CloudFront Distribution ID
        id: cloudfront
        run: |
          export CLOUDFRONT_ID=$(terraform output -json cloudfront_distribution_id | jq -r '.')
          echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"

      # Step 9: CloudFront Cache Invalidation
      - name: Invalidate CloudFront Cache
        run: |
          echo "Using Distro ID" $CLOUDFRONT_ID
          terraform output -raw cloudfront_distribution_id
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
